---

# Check if catalina.sh exists
- name: Check is catalina.sh exists
  stat:
    path: "{{ tomcat_directory }}/bin/catalina.sh"
  register: stat_result
  tags:
    - bps

#Stop the services in order starting with Tomcat
- name: stop apache tomcat
  shell: "{{ tomcat_directory }}/bin/catalina.sh stop -force"
  when: stat_result.stat.exists
  ignore_errors: true
  tags:
    - bps

# Execute commands to stop Connectivity
- name: Stop Connectivity
  shell: "./connectivityd stop"
  args:
    chdir: "{{ connectivity_base_software_directory }}/bin"
  tags:
    - bps

# Check if stopService.sh exists
- name: Check is stopService.sh exists
  stat:
    path: "{{ bps_base_software_directory }}/wrapper/stopService.sh"
  register: stat_result
  tags:
    - bps

# Run scripts to stop BPS
- name: Stop BPS Service
  shell: "./stopService.sh . && ps -ef | grep 'wrapper.jar' | grep -v grep | awk '{print $2}' | xargs -r kill -9"
  args:
    chdir: "{{ bps_base_software_directory }}/wrapper"
  when: stat_result.stat.exists
  tags:
    - bps

# Create test folder if does not exist
- name: "create {{ backup_directory }}/Test directory"
  file:
    path: "{{ backup_directory }}/Test"
    state: directory
    recurse: yes
  when: "'bps' in ansible_run_tags"
  tags:
    - test_bps_config

# Create backup of conf directory for testing
- name: "create a backup zip file for {{ bps_base_software_directory }}/conf"
  archive:
    path: "{{ bps_base_software_directory }}/conf/{{ item }}"
    dest: "{{ backup_directory }}/Test/{{ solution_version }}_{{ component }}_Test_Conf.zip"
    format: zip
  with_items: 
    - "*.conf"
    - "*.cfg"
    - "*.properties"
    - "*.xml"
  when: "'bps' in ansible_run_tags"
  tags:
    - test_bps_config

# Remove existing installation
- name: clean up existing installation
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ bps_uninstall_list }}"
  tags:
    - bps

- name: "Extract default BPS base software installation into {{ bps_base_software_directory }}"
  unarchive:
    src: "{{ backup_directory }}/1.9_BPS_Base_Software.zip"
    dest: "{{ powercurve_directory }}"
  tags:
    - bps

- name: "Extract default BPS solution into {{ bps_solution_directory }}"
  unarchive:
    src: "{{ backup_directory }}/1.9_BPS_Solution.zip"
    dest: "{{ experian_directory }}"
  tags:
    - bps

- name: "Extract test BPS config into {{ bps_base_software_directory }}"
  unarchive:
    src: "{{ backup_directory }}/Test/{{ solution_version }}_{{ component }}_Test_Conf.zip"
    dest: "{{ bps_base_software_directory }}/conf"
  when: "'bps' in ansible_run_tags"
  tags:
    - test_bps_config

# Copy Conf folder from packaing folder to base directory, skip if we are using test_bps_config
- name: Copy Conf Folder to BPS directory
  copy:
    src: "{{ package_directory }}/conf/"
    dest: "{{bps_base_software_directory}}/conf"
    remote_src: yes
  when: "'test_bps_config' not in ansible_run_tags"
  tags:
    - bps

# Create folder if does not exist
- name: Create Directory
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  with_items:
    - "{{ bps_solution_directory }}/clientlib"
    - "{{ bps_solution_directory }}/Deploy"
    - "{{ bps_solution_directory }}/Deployed"
    - "{{ bps_solution_directory }}/Enrichment_Solutions"
    - "{{ bps_solution_directory }}/Logs"
    - "{{ bps_base_software_directory }}/logs"
  tags:
    - bps

# Copy custombps jar file
- name: "Copy custombps-{{ version }}.jar file to BPS solution clientlib directory"
  copy:
    src: "{{ package_directory }}/clientlib/{{ custombps_file }}"
    dest: "{{ bps_solution_directory }}/clientlib"
    remote_src: yes
  when: "'pco' in module and 'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - custombps_file

# Renew kerberos ticket
- name: Execute kerberos ticket renewal script
  shell: "./renew_krb_ticket.sh"
  args:
    chdir: "{{ kerberos_directory }}"
  tags:
    - bps
    - kerberos

# Check klist
- name: Check klist
  shell: "klist"
  tags:
    - bps
    - kerberos

 # Start BPS Service
- name: Start BPS Service
  shell: "./startService.sh ."
  args:
    chdir: "{{ bps_base_software_directory }}/wrapper"
  tags:
    - bps

# Import find and copy roles to copy dbpdm files
- name: Find and copy dbpdm files
  import_role:
    name: findandcopy
  vars:
    file_path: "{{ package_directory }}/runtime"
    regex_pattern: "(.*?).dbpdm.zip"
    destination_directory: "{{ bps_solution_directory }}/Deploy"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps

# Import deploy role to deploy dbpdm file
- name: deploy dbpdm file
  import_role:
    name: deploy
  vars:
    deploy_directory: "{{ bps_solution_directory }}/Deploy"
    regex_pattern: "(.*?).dbpdm.zip$"
    regex_fail_pattern: "(.*?).dbpdm.(.*?).fail(.*?)"
    deployed_directory: "{{ bps_solution_directory }}/Deployed"
    fileType: "dbpdm"
    component: "bps"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - dbpdm_file

 # Import find and copy roles to copy .ser files
- name: Find and copy ser files
  import_role:
    name: findandcopy
  vars:
    file_path: "{{ package_directory }}/runtime"
    regex_pattern: "(.*?).ser"
    destination_directory: "{{ bps_solution_directory }}/Enrichment_Solutions"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - ser_files

# Import find and copy roles to copy jar files
- name: Find and copy jar files
  import_role:
    name: findandcopy
  vars:
    file_path: "{{ package_directory }}/runtime"
    regex_pattern: "(.*?).jar"
    regex_fail_pattern: "(.*?).jar.fail(.*?)"
    destination_directory: "{{ bps_solution_directory }}/Deploy"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - jar_files

# Import deploy role to deploy jar files
- name: deploy jar files
  import_role:
    name: deploy
  vars:
    deploy_directory: "{{ bps_solution_directory }}/Deploy"
    regex_pattern: "(.*?).jar$"
    deployed_directory: "{{ bps_solution_directory }}/Deployed"
    fileType: "jar"
    component: "bps"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - jar_files

# Import find and copy roles to copy bpc files
- name: Find and copy bpc files
  import_role:
    name: findandcopy
  vars:
    file_path: "{{ package_directory }}/runtime/"
    regex_pattern: "(.*?).bpc.zip"
    destination_directory: "{{ bps_solution_directory }}/Deploy"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps
    - bpc_file

# Import deploy role to deploy bpc file
- name: deploy bpc file
  import_role:
    name: deploy
  vars:
    deploy_directory: "{{ bps_solution_directory }}/Deploy"
    regex_pattern: "(.*?).bpc.zip$"
    regex_fail_pattern: "(.*?).bpc.(.*?).fail(.*?)"
    deployed_directory: "{{ bps_solution_directory }}/Deployed"
    fileType: "bpc"
    log_path: "{{bps_solution_directory}}/Log/BPE.log"
    search_string: ".bpc.zip] deployment completed"
    component: "bps"
  when: "'no_bps_deploy' not in ansible_run_tags"
  tags:
    - bps

 # Start Connectivity Service
- name: Start Connectivity
  shell: "./connectivityd start"
  args:
    chdir: "{{ connectivity_base_software_directory }}/bin"
  when: "'connectivity' not in ansible_run_tags"
  tags:
    - bps

# Start Tomcat Service
- name: Start Apache Tomcat
  shell: ". {{ ansible_env.HOME }}/.bashrc && {{ tomcat_directory }}/bin/startup.sh"
  when: "'connectivity' not in ansible_run_tags and 'we' not in ansible_run_tags"
  tags:
    - bps

